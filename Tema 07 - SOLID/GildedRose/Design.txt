class System = GildedRose

    // single responsabilty principle? 
    - updates day: 
        - updates sellin
        - updates item quality

class Items: == normal items

    - conditions: q < 50
    - updates quality: if sellin == 0 { q = q - 2 + check to not assign negative value } else { q = q - 1 } 

class AgedBrie:
    - updates quality : q ++

class Sulfuras:
    - conditions: q = 80
    - updates quality: sold == false { return; } else { q-- }

class Backstage:
    - updates quality :
        - if ( 10 <= sellin > 5 ) { q += 2 }  
        - if ( sellin <= 5 ) { q += 3 }
        - if ( sellin == 0 ) { q = 0 }

class Conjured 
        - updates quality: if sellin == 0 { q = q - 4 + check to not assign negative value } else { q = q - 2 } 


TO DO
    - classes that should be created only with factory are public 
        - solutions:
            * single file ? 
            * internal classes - visible only to the namespace
    - refactor more according to SOLID
        - class Item !!
    - sold property 
